server:
  port: 9527

spring:
  application:
    name: cloud-gateway #以微服务注册进consul或nacos服务列表内
  cloud:
#=================== consul服务注册 =======================
    consul: #配置consul地址
      host: localhost
      port: 8500
      discovery:
        prefer-ip-address: true
        service-name: ${spring.application.name}


#================== GateWay网关配置 =====================
    gateway:
      routes:
#========================= 这是第一个路由配置(测试route + predicate) ============================================================================
        - id: pay_routh1 #pay_routh1                #路由的ID(类似mysql主键ID)，没有固定规则但要求唯一，建议配合服务名
          #uri: http://localhost:8001                #匹配后提供服务的路由地址
          uri: lb://cloud-payment-service          #匹配后提供服务的路由地址
          predicates:
            - Path=/pay/gateway/get/**              # 断言，路径相匹配的进行路由
            #- After=2024-04-11T21:32:25.768510100+08:00[Asia/Shanghai]
            #- Before=2024-04-12T21:32:25.768510100+08:00[Asia/Shanghai]
            #- Between=2024-04-11T21:32:25.768510100+08:00[Asia/Shanghai],2024-04-12T21:32:25.768510100+08:00[Asia/Shanghai]
            #- Cookie=username,zzyy
            #- Header=X-Request-Id, \d+ # 请求头要有X-Request-Id属性并且值为整数的正则表达式
            # - Host=**.iron.com
            #- Query=username, \d+  # 要有参数名username并且值还要是整数才能路由
            #- RemoteAddr=192.168.11.1/24 # 外部访问我的IP限制，最大跨度不超过32，目前是1~24它们是 CIDR 表示法。
            #- Method=GET                 # 限制请求的方式为 POST 方式
            #- My=gold                  # 这里传递的是自定义类里面的config值

          filters:
            - AddRequestHeader=X-Request-red, blue  # 将 X-Request-red = blue 加入到请求头中

#==================== 这是另外一个路由(测试 Filter) ========================================================================
        - id: pay_routh3 #pay_routh3
          uri: lb://cloud-payment-service                #匹配后提供服务的路由地址
          predicates:
            - Path=/pay/gateway/filter/**         # 断言，路径相匹配的进行路由 真实路径
            #- Path=/gateway/filter/**             # 结合 PrefixPath 将pay交给filter管理
            #- Path=/aaa/bbb/{segment}              # 结合 SetPath 使用，这里设置的是一个模板"假地址"，真正映射的地址再filter参数里面设置
          filters:
            #- AddRequestHeader=X-Request-Iron1,IronVlue1  # 请求头kv，若一头含有多参则重写一行设置
            #- AddRequestHeader=X-Request-Iron2,IronVlue2
            #- RemoveRequestHeader=X-Request-Iron2
            #- SetRequestHeader=X-Request-Iron1, IronVlue3
            #- AddRequestParameter=customerId, 2021213370
            #- AddRequestParameter=customerName, Iron
            #- RemoveRequestParameter=customerName
            #- AddResponseHeader=X-Response-color, Blue
            #- SetResponseHeader=Date,2099-11-11
            #- RemoveResponseHeader=Content-Type # 将默认自带Content-Type回应属性删除
            #- PrefixPath=/pay
            #- SetPath=/pay/gateway/{segment}
            #- RedirectTo=302, http://www.baidu.com/ # 访问http://localhost:9527/pay/gateway/filter跳转到http://www.百度.com/

#==================== 这是另外一个路由  ===================================================================================
        - id: pay_routh2 #pay_routh2                #路由的ID(类似mysql主键ID)，没有固定规则但要求唯一，建议配合服务名
          #uri: http://localhost:8001                #匹配后提供服务的路由地址
          uri: lb://cloud-payment-service          #匹配后提供服务的路由地址
          predicates:
            - Path=/pay/gateway/info/**              # 断言，路径相匹配的进行路由

#=============================== 配置默认Filter(即全局过滤器) + 测试自定义Filter ==============================================
      default-filters:
        - AddRequestHeader=X-Request-Iron2,IronVlue2
        #- My=iron


