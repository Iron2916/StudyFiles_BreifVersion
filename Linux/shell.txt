第一章：shell概述
	省略。。。

第二章：Shell脚本入门
	1）脚本格式：（1）#!/bin/bash 放在第一行开头
		     （2）文件以 .sh 结尾

	2）执行方式：（1）bash/sh/. /source + 文件路径(前两种是开了一个子shell，后两种是在父shell中执行的)
		     （2）采用输入脚本的绝对路径或相对路径执行脚本（必须具有可执行权限+x）
第三章：变量
	1）系统预定义变量：
		（1）常用系统变量：
			1.$HOME：查看系统变量的值
			2.$set：显示当前 Shell 中所有的变量
	2）自定义变量
		（1）自定义规则查看word
		（2）定义变量：1.非静态变量：变量名=赋值 例如：A=1
			        2.静态变量：readonly 变量名=赋值 例如：readonly B=2
		
		（3）撤销变量：unset 变量名
		（4）变量全局化：利用 export 变量名 可以将变量全局化
		（5）在 bash 中变量默认类型都为字符串类型，无法直接进行数值运算
		（6）父 shell 直接创建的变量是局部变量，子 shell 无法直接进行访问和修改。


	3）特殊变量
		（1）$n （功能描述：n为数字，$0代表该脚本名称，$1-$9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如${10}）
		（2）$#（功能描述：获取所有输入参数个数，常用于循环,判断参数的个数是否正确以及加强脚本的健壮性）
		（3）$* （功能描述：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体）
		（4）$@ （功能描述：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待）
		（5）$？（功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）

第四章：运算符
	1）基本语法：“$((运算式))”或“$[运算式]”

第五章：条件判断（1：false 0：true）
	1）基本语法：
		（1）test condition
		（2）[ condition ] （注意 condition 前后要有空格）
		（3）特殊情况：条件非空即为 true。例如 [ abc ] 返回 true， [ ] 返回 false。
	2）常用判断条件
		（1）两个整数之间比较：
			-eq 等于 (equal)		-ne 不等于 (not equal)
			-lt 小于 (less than)		-le 小于等于(less equal）
			-gt 大于 (greater than） 	-ge 大于等于(greater equal）
			例子：[ 1 -lt 3 ] echo $? 打印结果：0(true) 
		（2）文件权限进行比较：
			基本判断条件：r：有读的全线 ；w：有写的权限 ；-x：有执行的权限
			例子：[ -w hello.sh ]
		（3）按照文件类型进行判断：
			基本判断条件：-e 文件存在（existence）；-f：文件存在并且是一个常规的为文件（file）；-d：文件存在并且是一个目录（directory）；
		（4）多条件判断（相当于三元运算符）：[ 判断语句 ] && 执行语句 || 执行语句。例子：[ -f hello.sh ] && echo 是文件 || echo 不是文件

第六章：流程控制(重点)
	1）if 判断
		（1）单分支：
			if [ 条件判断式 ] ;
			then 
				程序
			fi
		        或者：
			if [ 条件判断式 ]
			then 
				程序
			fi
		（2）多分支：
			if [ 条件判断式 ]
			then 
				程序
			elif [ 条件判断式 ]
			then
				程序
			else
				程序
		（3）注意事项：[ 条件判断 ] 之间有空格进行隔开
			        if 后面有空格
			        如果显示期待二元运算符：可以将 “$1"X = "判断值"X 用字符串的拼接操作进行判断（相当于在没有输入值的时候默认赋值 $1 = $2 = X）

	2）case语句：
		（1）基本语法：
			case $变量名 in
			"value1")
				程序1
			;;
			"value2")
				程序2
			;;
			*)
				程序3（如果变量的值不上前面的值，则匹配此程序）
			esac
 		（2）注意事项：
			（1）case 行尾必须为单词“in”，每一个模式匹配必须以右括号“）”结束。
			（2）双分号“;;”表示命令序列结束，相当于 java 中的 break。
			（3）最后的“*）”表示默认模式，相当于 java 中的 default。

	3）for循环：
		（1）基本语法1：
			for(( 初始值；循环值；变量值 ))
			do
				程序
			done
		 （2）基本语法2：
			for i(自定义变量) in value1 value2 value3
			do
				echo "$i"
			done
	
	4）while循环：
		while [条件判断式]：
		do
			程序
		done

第七章：read 读取控制台输入
	1）基本语法：red （选项）（参数）
		①选项：
		-p：指定读取值时的提示符；
		-t：指定读取值时等待的时间（秒）如果-t 不加表示一直等待
		②参数
		变量：指定读取值的变量名
		例子：read -t 7 -p "Enter your name in 7 seconds:" Name

第八章：函数
	1）系统函数：
		①basename:
			基本语法：basename [string / pathname] [suffix] （功能描述：basename 命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来。basename 可以理解为取路径里的文件名称）
			选项：suffix 为后缀，如果 suffix 被指定了，basename 会将 pathname 或 string 中的 suffix 去掉。
			例子：
			basename /home/atguigu/banzhang.txt
			输出：banzhang.txt
			basename /home/atguigu/banzhang.txt .txt
			输出：banzhang

		②direname:
			基本语法：dirname 文件绝对路径 （功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））
			dirname 可以理解为取文件路径的绝对路径名称
			例子：
			dirname /home/atguigu/banzhang.txt
			输出：
			/home/atguigu
	2）自定义函数：
		①基本语法：
		[ function ] funname[()]
		{
		Action;
		[return int;]
		}
		
		②经验技巧
		（1）必须在调用函数地方之前，先声明函数，shell 脚本是逐行运行。不会像其它语言一样先编译。
		（2）函数返回值，只能通过$?系统变量获得，可以显示加：return 返回，如果不加，将
		   以最后一条命令运行结果，作为返回值。return 后跟数值 n(0-255)，使用命令替换 $() 读取最后一行数据
		③ 读取返回值 $? 进行读取返回值

第十章：正则表达式
	1) 基本语法：cat /etc/passwd | grep iron
	例子：
	cat /etc/passwd | grep ^i：匹配以i开头
	cat /etc/passwd | grep bash$： 匹配以bash结尾
	cat /etc/passwd | grep r..t：.为任意字符，rabt,rbbt,rxdt,root	
	cat /etc/passwd | grep ro*t *任意多个字符
	[ ] 表示匹配某个范围内的一个字符，例如
	[6,8]------匹配 6 或者 8
	[0-9]------匹配一个 0-9 的数字
	[0-9]*------匹配任意长度的数字字符串
	[a-z]------匹配一个 a-z 之间的字符
	[a-z]* ------匹配任意长度的字母字符串
	[a-c, e-f]-匹配 a-c 或者 e-f 之间的任意字符
第十一章：文本处理
	1）cut [选项参数】 filename
		cut -d " " -f 1 cut.txt ： 以 " " 分割 切割并获得第一列
	2）awk[选项参数] filename
		参考文章：https://blog.csdn.net/xiaojin21cen/article/details/117739791


			
		